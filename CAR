/**
 * @auther 黃粲鈞
 * @date 2021/03/13
 * @vision 1.0
 * @return no return
 */
#include <iostream>
#include <string>
using namespace std;

/**
 * 建立類別資料CCAR
 * 其中private內的資料無法在類別外部做使用
 * protect內的資料無法在類別外部使用，但能被子類別繼承使用
 * public內的資料則可在外部做使用
 */
class CCAR {
private:
string nickname;
protected:
int light;
int wheel;
public:
/**
 * 利用建構元去做成員的初始化
 * 建構員不會被子類別繼承
 * 物件建立時便被呼叫
 */
CCAR() :light(2)
{
wheel = 5;
cout << "car's constructor(wheel=" << wheel << ")" << endl;
}
CCAR(string nickname) :light(2)
{
wheel = 5;
this->nickname = nickname;
cout << "car's constructor(nickname=" << nickname << ")" << endl;
}
/**
 * 設立解構元
 * 解構元在物件被銷毀時被呼叫
 */
~CCAR()
{
cout << "car's destructor" << "(" << nickname << ")" << endl;
}
/**
 * 宣告函式，為CCAR能進行的動作
 */
void start()
{
cout << "car's start" << endl;
}
void stop()
{
cout << "car's stop" << endl;
}
void turn()
{
cout << "car's turn" << endl;
}
};
/**
 * 建立子類別CBMW，繼承自CCAR
 */
class CBMW : public CCAR {
public:
CBMW() { light = 4; wheel = 4; cout << "bmw's constructor" << endl; }
~CBMW() { cout << "bmw's destructor" << endl; }
void Abs()
{
cout << "bmw's abs" << endl;
}
void start()
{
cout << "bmw's start" << endl;
CCAR::start();//scope operator
//CCAR c;
//c.start();
}
};
//--------------------------
int main(int argc, const char * argv[]) {
CBMW bmw;
bmw.start();
bmw.Abs();
bmw.stop();
}
